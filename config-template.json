{
    "amzn": {
        "clientId": "REPLACE",
        "clientSecret": "REPLACE",
        "grantCode": "REPLACE",
        "lwaHost": "api.amazon.com",
        "lwaPath": "/auth/o2/token",
        "eventGatewayHost": "api.amazonalexa.com",
        "eventGatewayPath": "/v3/events",
        "preemptiveRefreshTime": 300
    },
    "mongodb": {
        "mongodbUrl": "REPLACE",
        "mongodbCollection": "camera_uploads"
    },
    "log": {
        "level": "info",
        "silent": false,
        "consoleLog": true,
        "baseName": "REPLACE"
    },
    "recordings": {
        "recordingsBasePath": "REPLACE",
        "videoUriBase": "REPLACE",
        "checkRecordingsInterval": 5000
    },
    "cameras":[
      {
        "endpointId": "1",
        "manufacturerName": "Axis",
        "manufacturerId": "axis-ACCC8E5E7513",
        "modelName": "P1425-LE",
        "friendlyName": "Front Porch Camera",
        "description": "Front Porch Camera",
        "resolutions": [
          {"width": 1280, "height": 720}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-1"
      },
      {
        "endpointId": "2",
        "manufacturerName": "Axis",
        "manufacturerId": "",
        "modelName": "P1425-LE",
        "friendlyName": "East Side Camera",
        "description": "East Side Camera",
        "resolutions": [
          {"width": 720,  "height": 1280}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-2"
      },
      {
        "endpointId": "3",
        "manufacturerName": "Axis",
        "manufacturerId": "",
        "modelName": "P1435-LE",
        "friendlyName": "Back Yard Camera",
        "description": "Back Yard Camera",
        "resolutions": [
          {"width": 1280, "height": 720}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-3"
      },
      {
        "endpointId": "4",
        "manufacturerName": "Axis",
        "manufacturerId": "",
        "modelName": "P1425-LE",
        "friendlyName": "Back Garage Camera",
        "description": "Back Garage Camera",
        "resolutions": [
          {"width": 1280, "height": 720}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-4"
      },
      {
        "endpointId": "5",
        "manufacturerName": "Axis",
        "manufacturerId": "axis-ACCC8E6E3530",
        "modelName": "P1425-LE",
        "friendlyName": "Playroom Door Camera",
        "description": "Playroom Door Camera",
        "resolutions": [
          {"width": 1280, "height": 720}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-5"
      },
      {
        "endpointId": "6",
        "manufacturerName": "Axis",
        "manufacturerId": "",
        "modelName": "P1425-LE",
        "friendlyName": "Front Gate Camera",
        "description": "Front Gate Camera",
        "resolutions": [
          {"width": 720,  "height": 1280}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-6"
      },
      {
        "endpointId": "7",
        "manufacturerName": "Axis",
        "manufacturerId": "",
        "modelName": "P1435-LE",
        "friendlyName": "Back Porch Camera",
        "description": "Back Porch Camera",
        "resolutions": [
          {"width": 1280, "height": 720}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["NONE"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-7"
      },
      {
        "endpointId": "8",
        "manufacturerName": "Wyze",
        "manufacturerId": "",
        "modelName": "Wyze Cam v2",
        "friendlyName": "Crawl Space Camera",
        "description": "Crawl Space Camera",
        "resolutions": [
          {"width": 1280, "height": 720}
        ],
        "videoCodecs": ["H264"],
        "audioCodecs": ["G711"],
        "uri": "rtsp://cam.lsacam.com:443/proxyStream-8"
      }
  ]
}

from Python.display import url('https://github.com/sartajbhuvaji/brain-tumor-classification-dataset')
from Python.display import url('https://github.com/masoudnick/Brain-Tumor-MRI-Classification/blob/main/Preprocessing.py')
from Python.display import url('https://www.kaggle.com/datasets/ngnmwt/mri-plus-ct-date')
from Python.display import url('https://www.kaggle.com/code/ngnmwt/ct-mri-plus-signal')
# Distribution graphs (histogram/bar graph) of column data def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow): nunique = df.nunique() df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values nRow, nCol = df.shape columnNames = list(df) nGraphRow = (nCol + nGraphPerRow - 1) / nGraphPerRow plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k') for i in range(min(nCol, nGraphShown)): plt.subplot(nGraphRow, nGraphPerRow, i + 1) columnDf = df.iloc[:, i] if (not np.issubdtype(type(columnDf.iloc[0]), np.number)): valueCounts = columnDf.value_counts() valueCounts.plot.bar() else: columnDf.hist() plt.ylabel('counts') plt.xticks(rotation = 90) plt.title(f'{columnNames[i]} (column {i})') plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0) plt.show() 



# Correlation matrix def plotCorrelationMatrix(df, graphWidth): filename = df.dataframeName df = df.dropna('columns') # drop columns with NaN df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values if df.shape[1] < 2: print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2') return corr = df.corr() plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k') corrMat = plt.matshow(corr, fignum = 1) plt.xticks(range(len(corr.columns)), corr.columns, rotation=90) plt.yticks(range(len(corr.columns)), corr.columns) plt.gca().xaxis.tick_bottom() plt.colorbar(corrMat) plt.title(f'Correlation Matrix for {filename}', fontsize=15) plt.show() 



# Scatter and density plots def plotScatterMatrix(df, plotSize, textSize): df = df.select_dtypes(include =[np.number]) # keep only numerical columns # Remove rows and columns that would lead to df being singular df = df.dropna('columns') df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values columnNames = list(df) if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots columnNames = columnNames[:10] df = df[columnNames] ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde') corrs = df.corr().values for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)): ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize) plt.suptitle('Scatter and Density Plot') plt.show()




nRowsRead = 1000 # specify 'None' if want to read whole file # Test.csv has 5682 rows in reality, but we are only loading/previewing the first 1000 rows df1 = pd.read_csv('Test.csv', delimiter=',', nrows = nRowsRead) df1.dataframeName = 'Test.csv' nRow, nCol = df1.shape print(f'There are {nRow} rows and {nCol} columns')



df1.head(5)



plotPerColumnDistribution(df1, 10, 5)



nRowsRead = 1000 # specify 'None' if want to read whole file # Train.csv has 8524 rows in reality, but we are only loading/previewing the first 1000 rows df2 = pd.read_csv('Train.csv', delimiter=',', nrows = nRowsRead) df2.dataframeName = 'Train.csv' nRow, nCol = df2.shape print(f'There are {nRow} rows and {nCol} columns')




plotCorrelationMatrix(df1, 8)


plotScatterMatrix(df1, 9, 10)


df2.head(5)


plotCorrelationMatrix(df2, 8)


plotScatterMatrix(df2, 12, 10)
